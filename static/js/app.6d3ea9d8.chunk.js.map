{"version":3,"sources":["colors.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","toDos","setToDos","useEffect","loadToDos","saveToDos","toSave","a","async","AsyncStorage","setItem","JSON","stringify","console","log","getItem","s","parse","View","style","styles","container","StatusBar","header","Pressable","hitSlop","onPress","Text","fontSize","fontWeight","color","TextInput","onSubmitEditing","newToDos","Date","now","work","placeholder","onChangeText","payload","returnKeyType","input","ScrollView","Object","keys","map","key","toDo","toDoText","Platform","OS","confirm","Alert","alert","deleteToDo","FontAwesome5","name","size","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","marginTop","btnText","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems"],"mappings":"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","file":"static/js/app.6d3ea9d8.chunk.js","sourcesContent":["export const theme = {\n  bg: \"black\",\n  grey: \"#3A3D40\",\n  toDoBg: \"#5C5C60\",\n};\n","import { StatusBar } from \"expo-status-bar\";\nimport React, { useState, useEffect } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  Pressable,\n  TextInput,\n  ScrollView,\n  Alert,\n  Platform,\n} from \"react-native\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { FontAwesome5 } from \"@expo/vector-icons\";\nimport { theme } from \"./colors\";\n\nconst STORAGE_KEY = \"@toDos\";\n\nexport default function App() {\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState(\"\");\n  const [toDos, setToDos] = useState({});\n  useEffect(() => {\n    loadToDos();\n  }, []);\n  const travel = () => setWorking(false);\n  const work = () => setWorking(true);\n  const onChangeText = (payload) => setText(payload);\n  const saveToDos = async (toSave) => {\n    try {\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  const loadToDos = async () => {\n    try {\n      const s = await AsyncStorage.getItem(STORAGE_KEY);\n      if (s) setToDos(JSON.parse(s));\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const addToDo = async () => {\n    if (text === \"\") {\n      return;\n    }\n    const newToDos = { ...toDos, [Date.now()]: { text, work: working } };\n    setToDos(newToDos);\n    await saveToDos(newToDos);\n    setText(\"\");\n  };\n\n  const deleteToDo = async (key) => {\n    if (Platform.OS === \"web\") {\n      const ok = confirm(\"Do you want to delete this To Do?\");\n      if (ok) {\n        const newToDos = { ...toDos };\n        delete newToDos[key];\n        setToDos(newToDos);\n        saveToDos(newToDos);\n      }\n    } else {\n      Alert.alert(\"Delete To Do\", \"Are you sure?\", [\n        { text: \"Cancel\" },\n        {\n          text: \"I'm sure\",\n          onPress: () => {\n            const newToDos = { ...toDos };\n            delete newToDos[key];\n            setToDos(newToDos);\n            saveToDos(newToDos);\n          },\n        },\n      ]);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"auto\" />\n      <View style={styles.header}>\n        <Pressable hitSlop={50} onPress={work}>\n          <Text\n            style={{\n              fontSize: 38,\n              fontWeight: \"600\",\n              color: working ? \"white\" : theme.grey,\n            }}\n          >\n            Work\n          </Text>\n        </Pressable>\n        <Pressable hitSlop={50} onPress={travel}>\n          <Text\n            style={{\n              fontSize: 38,\n              fontWeight: \"600\",\n              color: !working ? \"white\" : theme.grey,\n            }}\n          >\n            Travel\n          </Text>\n        </Pressable>\n      </View>\n      <TextInput\n        onSubmitEditing={addToDo}\n        placeholder={working ? \"Add a To Do\" : \"Where do you want to go?\"}\n        onChangeText={onChangeText}\n        returnKeyType={\"done\"}\n        style={styles.input}\n      ></TextInput>\n      <ScrollView>\n        {Object.keys(toDos).map((key) => {\n          if (toDos[key].work === working)\n            return (\n              <View style={styles.toDo} key={key}>\n                <Text style={styles.toDoText}>{toDos[key].text}</Text>\n                <Pressable onPress={() => deleteToDo(key)} hitSlop={50}>\n                  <FontAwesome5 name=\"trash-alt\" size={18} color=\"white\" />\n                </Pressable>\n              </View>\n            );\n        })}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n    marginTop: 100,\n  },\n  btnText: {},\n  input: {\n    backgroundColor: \"white\",\n    paddingVertical: 15,\n    paddingHorizontal: 20,\n    borderRadius: 30,\n    marginVertical: 20,\n    fontSize: 18,\n  },\n  toDo: {\n    backgroundColor: theme.grey,\n    marginBottom: 10,\n    paddingVertical: 20,\n    paddingHorizontal: 20,\n    borderRadius: 15,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  toDoText: {\n    color: \"white\",\n    fontSize: 16,\n    fontWeight: \"500\",\n  },\n});\n"],"sourceRoot":""}